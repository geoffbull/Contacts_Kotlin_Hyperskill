type: edu
files:
- name: src/Main.kt
  visible: true
  text: |-
    package contacts

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/Contact.kt
  visible: true
  text: |-
    package contacts
    import kotlinx.datetime.*

    interface ContactInterface {
        var phoneNumber: String
        var isPerson: Boolean
        var timeCreated: LocalDateTime
        var lastEditedTime: LocalDateTime

        fun setPhoneNumber()  {
                println("Enter the number:")
                phoneNumber = readln().trim()
                if(!checkPhoneNumber(phoneNumber)) {
                    phoneNumber = "[no number]"
                    println("Wrong number format!")
                }
        }

        fun checkPhoneNumber(number: String): Boolean {
            val phoneCheckRegex = "^\\+?((\\(\\w+\\)(-| )?(\\w{2,})?)|(\\w+(-| )?(\\(\\w{2,}\\))?)|(\\w+(-| )?(\\w{2,})?))((-| )?(\\w{2,}))*".toRegex()
            return phoneCheckRegex.matches(number)
        }

        fun setCreatedTime() {
            timeCreated = Clock.System.now().toLocalDateTime(TimeZone.of("UTC+2"))
        }
        fun setLastEditedTime() {
            lastEditedTime = Clock.System.now().toLocalDateTime(TimeZone.of("UTC+2"))
        }
        fun setName()
        fun setSurname() {
            throw NotImplementedError("The setSurname method is not implemented on this child of the Contact Parent Class ")
        }
        fun setBirthDate() {
            throw NotImplementedError("The setBirthDate method is not implemented on this child of the Contact Parent Class ")
        }
        fun setGender() {
            throw NotImplementedError("The setGender method is not implemented on this child of the Contact Parent Class ")
        }
        fun setAddress() {
            throw NotImplementedError("The Set Name is not implemented on this child of the Contact Parent Class ")
        }
        fun nameToString(): String

    }

    abstract class Contact(override var phoneNumber: String = String(),
                           override var isPerson: Boolean = false,
                           override var timeCreated: LocalDateTime = Clock.System.now().toLocalDateTime(TimeZone.of("UTC+2")),
                           override var lastEditedTime: LocalDateTime = Clock.System.now().toLocalDateTime((TimeZone.of("UTC+2")))): ContactInterface {
                       }


    class Person(private var name: String = String(),
                 private var surname: String = String(),
                 private var birthdate: String = String(),
                 private var gender: String = String()): Contact() {

        init {
            isPerson = true
            setName()
            setSurname()
            setBirthDate()
            setGender()
            setPhoneNumber()
            setCreatedTime()
            setLastEditedTime()
            println("The record added.")
            println()
        }

        override fun setName() {
            println("Enter the name:")
            name = readln().trim().replaceFirstChar { it.uppercase() }
        }

        override fun setSurname() {
            println("Enter the surname:")
            surname = readln().trim().replaceFirstChar { it.uppercase() }
        }

        override fun setBirthDate() {
            println("Enter birth date:")
            try {
                birthdate = LocalDate.parse(readln().trim()).toString()
            } catch(e: Exception) {
                birthdate = "[no data]"
                println("Bad birth date!")
            }
        }

        override fun setGender() {
            println("Enter the gender")
            when (readln().trim()) {
                "M" -> gender = "M"
                "F" -> gender = "F"
                else -> {
                    gender = "[no data]"
                    println("Bad gender!")
                }
            }
        }

        override fun nameToString(): String{
            return "$name $surname"
        }

        override fun toString(): String {
            return "Name: $name\n" +
                    "Surname: $surname\n" +
                    "Birth date: $birthdate\n" +
                    "Gender: $gender\n" +
                    "Number: $phoneNumber\n" +
                    "Time created: $timeCreated\n" +
                    "Time last edit: $lastEditedTime"
        }
    }

    class Organization(private var name: String = String(),
                       private var address: String = String()): Contact() {

        init {
            isPerson = false
            setName()
            setAddress()
            setPhoneNumber()
            setCreatedTime()
            setLastEditedTime()
            println("The record added.")
            println()
        }

        override fun setName() {
            println("Enter the organization name:")
            name = readln().trim()
        }

        override fun setAddress() {
            println("Enter the address:")
            address = readln().trim()
        }

        override fun toString(): String {
            return "Organization name: $name\n" +
                    "Address: $address\n" +
                    "Number: $phoneNumber\n" +
                    "Time created: $timeCreated\n" +
                    "Time last edit: $lastEditedTime"
        }

        override fun nameToString(): String {
            return name
        }

    }
  learner_created: true
- name: src/ContactList.kt
  visible: true
  text: |-
    package contacts

    import kotlinx.datetime.Clock
    import kotlinx.datetime.TimeZone
    import kotlinx.datetime.toJavaInstant
    import kotlinx.datetime.toLocalDateTime
    import kotlin.system.exitProcess

    class ContactList {
        private val contactList = mutableListOf<Contact>()
        fun mainMenu() {
            while(true) {
                println("Enter action (add, remove, edit, count, list, exit):")
                when (readln()) {
                    "add" -> add()
                    "remove" -> remove()
                    "edit" -> edit()
                    "count" -> count()
                    "info" -> info()
                    "exit" -> exitProcess(0)
                    else -> println("Invalid input!")
                }
            }
        }

        private fun add() {
            println("Enter the type (person, organization):")
            when (readln().trim()) {
                "person" -> contactList.add(Person())
                "organization" -> contactList.add(Organization())
                else -> println("Invalid Input!")
            }
        }


        private fun remove() {
            if (contactList.size == 0) return println("No records to remove")
            list()
            println("Select a record:")
            try {
                contactList.removeAt(readln().toInt() - 1)
            } catch(e: Exception) {
                return println("Invalid input!")
            }
            println("The record removed!")
        }

        private fun edit() {
            if (contactList.size == 0) return println("No records to edit")
            list()
            println("Select a record")
            try {
                val contactToEdit = contactList[readln().toInt() - 1]
                when {
                    (contactToEdit.isPerson) -> {
                        println("Select a field (name, surname, birth, gender, number):")
                        when (readln().trim()) {
                            "name" -> contactToEdit.setName()
                            "surname" -> contactToEdit.setSurname()
                            "birth" -> contactToEdit.setBirthDate()
                            "gender" -> contactToEdit.setGender()
                            "number" -> contactToEdit.setPhoneNumber()
                            "exit" -> exitProcess(0)
                            else -> println("Invalid input!")
                        }
                    }
                    else -> {
                        println("Select a field (address, number")
                        when (readln().trim()) {
                            "address" -> contactToEdit.setAddress()
                            "number" -> contactToEdit.setPhoneNumber()
                            "exit" -> exitProcess(0)
                            else -> println("Invalid input!")
                        }
                    }
                }
                contactToEdit.lastEditedTime = Clock.System.now().toLocalDateTime(TimeZone.of("UTC+2"))

            } catch(e: Exception) {
                return println("invalid input")
            }

            println("The record updated!")
            println()
        }

        private fun count() {
            println("${contactList.size} records")
        }

        private fun list() {
            for (contact in contactList) {
                println("${contactList.indexOf(contact) + 1}. ${contact.nameToString()}")
            }
        }

        private fun info() {
            if (contactList.size == 0) return println("No records to list")
            list()
            println("Select a record")
            try {
                println(contactList[readln().toInt() - 1].toString())
                println()
            } catch(e: Exception) {
                println("Invalid Input!")
            }
        }


    }
  learner_created: true
- name: contact_list.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20391#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Fri, 21 Apr 2023 03:54:23 UTC"
record: -1
